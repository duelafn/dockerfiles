#!/usr/bin/perl -w
# Author: Dean Serenevy  <dean@serenevy.net>
# This software is Copyright (c) 2015 CMM, Inc.
use strict; use warnings; use 5.014;

use Getopt::Long qw/:config bundling/;
use Hash::Util qw/ lock_keys /;
our $VERSION = '0.1.0';# Created: 2015-04-22

our %OPT = ( basedir => "/home/deans/docker" );
our @OPT_SPEC =
qw/ help|h version noact|no-act|dry-run DEBUG
    basedir=s
  /;
sub USAGE { <<"__USAGE__" };
usage: $_[0] [options]
__USAGE__

use Cwd qw/ chdir /;

get_options( \%OPT, @OPT_SPEC );
MAIN(\%OPT, @ARGV);


sub MAIN {
    # Test each image for needed upgrades: DIRECTORY, TEST_IMAGE_NAME
    # Order irrelevant here.
    my $mariadb   = build_upgrade("mariadb",  "timeclock-data");
    my $timeclock = build_upgrade("timecard", "timeclock");
    my $puppet3   = build_upgrade("puppet",   "puppet3");
    my $gitolite  = build_upgrade("gitolite", "gitolite");
    my $sshd      = build_upgrade("sshd",     "ssh-proxy");

    # Now restart services if any dependencies have changed
    # Order matters here!
    restart("docker-timeclock-data", $mariadb);
    restart("docker-timeclock",      $mariadb, $timeclock);
    restart("docker-puppet3",        $puppet3);
    restart("docker-gitolite",       $gitolite);
    restart("docker-ssh-proxy",      $sshd);
}

# Return true if an upgrade succeeded.
sub build_upgrade {
    my ($dir, $name) = @_;
    chdir "$OPT{basedir}/$dir";
    return (0 == system(make => upgrade => "NAME=$name"));
}

# Restart the service if any delendencies were updated.
sub restart {
    my $service = shift;
    system systemctl => restart => $service if grep $_, @_;
}


sub get_options {
    my $OPT = shift;
    GetOptions $OPT, @_ or usage(1);
    usage() if $$OPT{help} || $$OPT{version};
    die "basedir must be absolute\n" unless $$OPT{basedir} =~ m#^/#;
    lock_keys(%$OPT, keys %$OPT, map /^(\w+)/, @_);
}

sub usage {
    my $status = (@_ && $_[0] =~ /^\d+$/) ? shift(@_) : 0+@_;
    print @_, "\n" if @_;
    require File::Spec; my $exe = (File::Spec->splitpath($0))[2];
    $OPT{$_} = $OPT{$_} ? "enabled" : "disabled" for map /^(\w+).*!/, @OPT_SPEC;
    print $OPT{version} ? "$exe version $VERSION\n" : USAGE($exe);
    exit $status;
}
