#!/usr/bin/perl -w
# Copyright (C) 2016  Dean Serenevy
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
use strict; use warnings; use 5.014;

use Getopt::Long qw/:config bundling/;
use Hash::Util qw/ lock_keys /;
use FindBin;
our $VERSION = '1.0.2';# Created: 2015-12-05

our %OPT = (
    keep_major => 3, keep_history => 3, keep_time => "3 months",
    config => "$FindBin::Bin/../upgrade.conf",
);
our @OPT_SPEC =
qw/ help|h version noact|no-act|dry-run DEBUG|verbose|v!
    force|f! config|c=s
    interactive|i!
  /;
sub USAGE { <<"__USAGE__" };
usage: $_[0] [options]

OPTIONS

 --force, -f         pass --force option to docker rmi

 --config, -c CONF   read config file ($OPT{config})

 --interactive, -i   prompt for confirmation after listing removals

 --verbose, -v       print additional information while running
 --help, -h          this usage message
 --version           show script version
__USAGE__

use Dean::Util qw/ natural_sort parse_date Tf /;
use JSON;
use Sort::Key::Natural qw/ rnatsort /;
use YAML qw/ LoadFile /;

get_options( \%OPT, @OPT_SPEC );
MAIN(\%OPT, @ARGV);


sub MAIN {
    my ($opt, @args) = @_;
    my (%repo, %image);
    my $horizon = parse_date("$OPT{keep_time} ago");
    die "Bad date" unless $horizon and $horizon lt parse_date("yesterday");

    my $config  = read_config($opt);
    my $repo    = images();
    my $running = containers();
    my $short_length = @$running ? length($$running[0]) : 0;
    my %running = map +($_ => 1), @$running;
    my @remove;

    for my $r (sort keys %$repo) {
        my @versions = rnatsort keys %{$$repo{$r}};
        my $keep_major   = $$config{$r}{major}   || $$config{_}{major}   || $OPT{keep_major}   || 1;
        my $keep_history = $$config{$r}{history} || $$config{_}{history} || $OPT{keep_history} || 1;
        my $keep_time    = $$config{$r}{time}    || $$config{_}{time}    || $horizon;

        my ($major, @keep, @rm);
        for my $v (@versions) {
            my $keep = 0;
            my $img = $$repo{$r}{$v};
            my ($M, $m) = split /\./, $v;
            $M =~ s/^r(\d+)$/$1/; # remove leading "r" if present
            $m //= 0;             # Allow integer versions ("r2")

            if ($M =~ /\D/ or $m =~ /\D/) {
                $keep = 1;        # Unversioned tag. Keep it
            }

            else {
                $major //= $M;
                $$img{created_dt} //= parse_date($$img{Created});

                $keep = 1 if $running{substr($$img{Id}, 0, $short_length)}; # Currently running! keep it
                $keep = 1 if $$img{created_dt} gt $keep_time;               # Too new, keep it
                $keep = 1 if $keep_history-- > 0;                           # Keep minimum number
                if ($M != $major) {
                    $keep = 1 if --$keep_major > 0;                         # Keep minimum number of major versions
                    $major = $M;
                }
            }

            if ($keep) {
                push @keep, $v unless $v eq "latest";
            } else {
                push @rm, $v;
                push @remove, "$r:$v";
            }
        }

        if (@keep or @rm) {
            say $r;
            say "  Keep:   @keep" if @keep;
            say "  Remove: @rm"   if @rm;
        }
    }

    unless (@remove) {
        say "\nNothing to remove";
        exit;
    }

    if ($OPT{noact}) {
        say "Remove images:";
        say "  $_" for @remove;
    } else {
        if ($OPT{interactive}) {
            print "Remove listed images, exited containers, and dangling references? ";
            return unless Tf;
        }

        rmi(@remove);
        # Clean up if anything left dangling
        rmc(exited());
        rmi(dangling());
    }
}

sub dangling {
    chomp(my @ids = qx| docker images -qaf dangling=true |);
    return @ids;
}

sub exited {
    chomp(my @ids = qx| docker ps -qaf status=exited |);
    return @ids;
}

sub read_config {
    my $opt = shift;
    my $conf = eval { LoadFile $$opt{config} };
    $conf = $$conf{prune} || {};
    for (values %$conf) {
        $$_{time} = parse_date("$$_{time} ago") if $$_{time};
    }
    return $conf;
}

sub containers {
    chomp(my @ids = qx| docker ps -q |);
    return \@ids;
}

sub images {
    # skip first line (header)
    my (undef, @rows) = qx| docker images --no-trunc |;
    my (%repo, %id);
    for (@rows) {
        my ($repo, $tag, $id) = split;
        next if $repo eq '<none>' or $tag eq '<none>';
        die "Didn't expect duplicate repo:tag pair ($repo:$tag)!" if $repo{$repo}{$tag};
        $repo{$repo}{$tag} = $id;
        $id{$id}++;
    }

    $id{$$_{Id}} = $_ for @{ inspect(keys %id) };

    for my $repo (keys %repo) {
        for my $tag (keys %{$repo{$repo}}) {
            $repo{$repo}{$tag} = $id{$repo{$repo}{$tag}};
        }
    }
    return \%repo;
}

sub inspect {
    die "Unexpected IDs: @_" if grep !/\A(?:sha256:)?[0-9a-fA-F]+\z/, @_;
    return [] unless @_;
    decode_json(qx| docker inspect @_ |);
}

sub rmc {
    return unless @_;
    my @cmd = ( docker => "rm" );
    push @cmd, "-f" if $OPT{force};
    if ($OPT{DEBUG}) {
        for (@_) {
            say "removing container $_";
            system @cmd => $_;
        }
    } else {
        system @cmd => @_;
    }
}

sub rmi {
    return unless @_;
    my @cmd = ( docker => "rmi" );
    push @cmd, "-f" if $OPT{force};
    if ($OPT{DEBUG}) {
        for (@_) {
            say "removing image $_";
            system @cmd => $_;
        }
    } else {
        system @cmd => @_;
    }
}

sub get_options {
    my $OPT = shift;
    GetOptions $OPT, @_ or usage(1);
    usage() if $$OPT{help} || $$OPT{version};
    lock_keys(%$OPT, keys %$OPT, map /^(\w+)/, @_);
}

sub usage {
    my $status = (@_ && $_[0] =~ /^\d+$/) ? shift(@_) : 0+@_;
    print @_, "\n" if @_;
    require File::Spec; my $exe = (File::Spec->splitpath($0))[2];
    $OPT{$_} = $OPT{$_} ? "enabled" : "disabled" for map /^(\w+).*!/, @OPT_SPEC;
    print $OPT{version} ? "$exe version $VERSION\n" : USAGE($exe);
    exit $status;
}
