#!/usr/bin/perl -w
# Copyright (C) 2016  Dean Serenevy
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
use strict; use warnings; use 5.014;
use Carp;

use Getopt::Long qw/:config bundling/;
use Hash::Util qw/ lock_keys /;
our $VERSION = '1.0.0';# Created: 2015-04-22

our %OPT;
our @OPT_SPEC =
qw/ help|h version noact|no-act|dry-run DEBUG
    verbose|v
    build_path|build-path=s build_user|build-user=s
    restart
    force|f!
    config|c=s
  /;
our @REPORT;
sub USAGE { <<"__USAGE__" };
usage: $_[0] [options]

Upgrades images as specified in an upgrade file.

OPTIONS

 --config <file>       explicitly specify the config file

 --force, -f           do not try to determine if upgrade is needed
                           (saves time when upgrade is known to be needed)

 --build-path <path>   path where docker repository is found

 --build-user <user>   user to use to build docker images

 --no-act,
 --dry-run             don't execute commands, just list what would be done

 --verbose             print commands as they are executed

 --DEBUG               print additional information while running
 --help, -h            this usage message
 --version             show script version


THE UPGRADE FILE

By default, reads:
   <bindir>/../upgrade.conf

File is a YAML-formatted config file consisting of several specific
entries.

   # The "config" key contains default command-line values. Anything
   # specified on the command line will override these values.

   config:
     build-path: /home/duelafn/docker
     build-user: "duelafn:docker"
     restart: 1


   # List of directories to build unconditionally

   build:
     - samba


   # LIST of systemd services which may need restarting. Each service is a hash
   # of docker instances (--name) and the corresponding directory containing
   # its image. Each image will be rebuilt only once and services will be
   # restarted in the order presented here.
   #
   # Special plain-string entries may also appear which perform specific actions
   #
   #  ":MSG ..."              - print a message on each run (e.g., to remind
   #                            the user to perform a manual upgrade)
   #
   #  "my-service"            - restart a normal system service
   #
   #  ":RELOAD my-service"    - reload a normal system service
   #
   #  ":SLEEP seconds"        - sleep seconds (e.g., to allow image to boot)

   services:

     # The system docker-puppet3.service controls docker image named "puppet3"
     # built from the "puppet" subdirectory.
     - docker-puppet3:
         puppet3: puppet

     - docker-www-riverbendmath-data:
         www-riverbendmath-data: postgresql

     - ":SLEEP 10"

     - docker-www-riverbendmath:
         www-riverbendmath: catalyst
         starman: starman

     - ":RELOAD nginx"


   # These images will be pulled from docker. If the item is a hashref, the
   # value (possibly an array) will be used as tags using "docker tag -f"

   pull-images:
     "debian:jessie": "debian:jessie"


   # Image dependencies, images listed here will be built first in the order
   # listed. Any images not listed here will be built in random order after
   # these.

   image-build-order:
     - starman
     - catalyst
__USAGE__

sub setup {
    my ($OPT, $ARGV) = @_;

    # Load configuration:
    my $file = guess_config($OPT);
    die "Can't find config file\n" unless defined($file) and -f $file;
    my $conf = LoadFile($file);
    unshift @$ARGV, $conf;

    # Merge into command-line arguments:
    $$OPT{build_path}   //= $$conf{config}{"build-path"};
    $$OPT{build_user}   //= $$conf{config}{"build-user"};
    $$OPT{restart}      //= ($$conf{config}{restart} and not $<);
    $$OPT{force}        //= $$conf{config}{force};
    $$OPT{DEBUG}   = 1  if $$conf{config}{DEBUG};
    $$OPT{verbose} = 1  if $$conf{config}{verbose} or $$OPT{DEBUG};

    # Check settings:
    die "build path must be absolute\n"    unless $$OPT{build_path} =~ m#^/#;
    die "must run as root for --restart\n" if $$OPT{restart} and $<;
}

use Cwd qw/ chdir /;
use YAML qw/ LoadFile /;
use JSON;
use FindBin;

get_options( \%OPT, @OPT_SPEC );
MAIN(\%OPT, @ARGV);

sub MAIN {
    my ($opt, $conf) = @_;

    if ($$conf{"pull-images"}) {
        pull_image($opt, $_ => $$conf{"pull-images"}{$_}) for keys %{$$conf{"pull-images"}};
    }

    my @action;  # { name => "systemd name", images => \@docker-image-names }
    my %path;     # directory => $docker-image-name to test
    my %image;    # image_name => bool (was restartd)

    for my $build (@{$$conf{"build"} || []}) {
        $path{$build} = [ ];# Build, but no services depend on it
    }

    for my $entry (@{$$conf{"services"} || []}) {
        if ('HASH' eq ref($entry)) {
            for my $name (keys %$entry) {# docker-puppet3
                my %svc = (name => $name);
                while (my ($image, $path) = each %{$$entry{$name}}) {# puppet3: puppet
                    push @{$path{$path}}, $image;
                    push @{$svc{images}}, $image;
                }
                push @action, \%svc;
            }
        } elsif (!ref($entry)) {
            if ($entry =~ s/^:MSG\s+//i) {
                push @action, { msg  => $entry };
            } elsif ($entry =~ s/^:RELOAD\s+//i) {
                push @action, { name => $entry, action => "reload" };
            } elsif ($entry =~ s/^:SLEEP\s+//i) {
                push @action, { sleep => $entry };
            } else {
                push @action, { name => $entry };
            }
        }
    }

    $$conf{"image-build-order"} ||= [];
    for my $p (suggestion_sort([keys %path], $$conf{"image-build-order"})) {
        next unless $path{$p};
        my $upgraded = build_upgrade($p, $path{$p}[0]);
        $image{$_} ||= $upgraded for @{$path{$p}};
    }

    if ($OPT{restart}) {
        for my $svc (@action) {
            say STDERR $$svc{msg} if $$svc{msg};
            sleep $$svc{sleep}    if $$svc{sleep};
            next unless $$svc{name};
            my $changed = $$svc{images} ? grep($image{$_}, @{$$svc{images} // []}) : 1;
            systemctl($$svc{action} || "restart", $$svc{name}) if $changed;
        }
    }

    report();
}

sub pull_image {
    my ($opt, $image, $tag) = @_;
    return unless $tag;
    run_ok(docker => pull => $image); say "";
    run_ok(docker => tag => -f => $image => $tag) and say "" if $tag and $tag =~ /\D/ and $image ne $tag;
}

sub guess_config {
    my $opt = shift;
    return $$opt{config} if $$opt{config};
    my ($file) = grep -f $_, "$FindBin::Bin/../upgrade.conf";
    return $file;
}

sub NOT_UPGRADED {
    push @REPORT, "Not Upgraded: @_";
}

sub report {
    say "\n\e[1mREPORT:\e[0m" if @REPORT;
    say for @REPORT;
}

# Return true if an upgrade succeeded.
sub build_upgrade {
    my ($dir, $name) = @_;
    my $cb = sub {
        chdir "$OPT{build_path}/$dir";
        if ($name and !$OPT{force} and grep( "/$name" eq ($$_{Name}//""), docker_ps() )) {
            # Requested container is running
            return run(make => upgrade => "NAME=$name");
        } else {
            # Not running, assume upgrade required
            return run(make => "force-upgrade");
        }
    };
    if ($< or 'root' eq $OPT{build_user}) {# non-root
        my $rv = $cb->(); say "";
        return $rv;
    } else {
        return do_as($OPT{build_user} => $cb);
    }
}

sub systemctl {
    my $action  = shift;
    my $service = shift;
    return say STDERR "Service $service not running." unless run(systemctl => status  => $service);
    return say STDERR "Error restarting $service."    unless run(systemctl => $action => $service);
}

sub docker_ps {
    chomp(my @ids = `docker ps -q`);
    return unless @ids;
    die "Invalid IDs: @ids" if grep /\W/, @ids;
    return @{decode_json(`docker inspect @ids`) // []};
}

sub get_options {
    my $OPT = shift;
    GetOptions $OPT, @_ or usage(1);
    usage() if $$OPT{help} || $$OPT{version};
    setup($OPT, \@ARGV);
    lock_keys(%$OPT, keys %$OPT, map /^(\w+)/, @_);
}

sub usage {
    my $status = (@_ && $_[0] =~ /^\d+$/) ? shift(@_) : 0+@_;
    print @_, "\n" if @_;
    require File::Spec; my $exe = (File::Spec->splitpath($0))[2];
    $OPT{$_} = $OPT{$_} ? "enabled" : "disabled" for map /^(\w+).*!/, @OPT_SPEC;
    print $OPT{version} ? "$exe version $VERSION\n" : USAGE($exe);
    exit $status;
}

sub run {
    say "@_"  if $OPT{noact} or $OPT{verbose};
    return 0 == system { $_[0] } @_ unless $OPT{noact};
    return 1;
}

sub run_ok {
    return 1 if run(@_);
    my $stat = $? >> 8;
    print STDERR "Error executing @_\n  ";
    if    ($? == -1) { croak "failed to execute: $!" }
    elsif ($? & 127) { croak sprintf("child died with signal %d, %s coredump", ($? & 127),  (($? & 128) ? 'with' : 'without')) }
    elsif ($stat)    { croak sprintf("child exited with value %d", $stat) }
    die "unknown error";
}


=head3 suggestion_sort

 suggestion_sort \@list, \@preferred

Returns @list sorted by the order of the objects in @preferred. All
elements are matched as strings and elements of @list that are not in
@preferred are placed at the end of the resulting list in a way that
preserves their original ordering within @list.

Notes: Undefined entries will be ignored. Only the first appearance of an
element in the C<@preferred> list will be considered. Repetitions in C<@list>
will be reduced to a single occurrence.

=cut

#BEGIN: suggestion_sort
sub suggestion_sort {
    my ($toSort, $Suggestion) = @_;
    my ($i, %sugg, @sorted) = 1;
    for (@$Suggestion) { $sugg{$_} ||= $i++ };
    for (@$toSort) {
        if (defined $sugg{$_}) { $sorted[$sugg{$_}] = $_ }
        else { $sorted[$i++] = $_ }
    }
    grep defined, @sorted;
}
#END: suggestion_sort



=head3 do_as

 do_as "username", sub { ... };
 do_as "username:groupname", sub { ... };

Locally change the effective user id and execute some code. Only works if
current user is root!

Ensures that $ENV{USER} and $ENV{HOME} are set appropriately. Will
eventually include options which will attempt to setup DISPLAY, DBUS,
XAUTH, SSH_AGENT, GPG_AGENT, and other variables useful for running and
connecting to existing X sessions, apps, and daemons of the user.

=cut

#BEGIN: do_as
sub do_as {
  my $func = pop;
  my ($user, %opt) = @_;
  my $group = ($user =~ s/:(.*)//) ? $1 : "";

  my (undef,undef,$uid,$gid,$quota,$comment,$gcos,$dir) = getpwnam($user);
  $gid = getgrnam($group) if $group;
  die unless defined($uid) and defined($gid);
  local %ENV = %ENV;

  $! = 0; local $) = $gid; die "Can't set gid: $!" if 0+$!;
  $! = 0; local $> = $uid; die "Can't set uid: $!" if 0+$!;
  $ENV{USER} = $user;
  $ENV{HOME} = $dir;

  return $func->();
}
#END: do_as
