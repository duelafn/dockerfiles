#!/usr/bin/perl -w
# Copyright (C) 2016  Dean Serenevy
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
use strict; use warnings; use 5.014;

use Getopt::Long qw/:config bundling/;
use Hash::Util qw/ lock_keys /;
our $VERSION = '1.0.0';# Created: 2016-01-21

our %OPT = (  );
our @OPT_SPEC =
qw/ help|h version noact|no-act|dry-run DEBUG
    replace
  /;
sub USAGE { <<"__USAGE__" };
usage: $_[0] [options] SOURCE [TARGET]

Create symlinks in the target directory pointing to the configuration
source directory. Links all relevant `localenv.docker` and `upgrade.conf`
files.

  TARGET defaults to the current working directory

This makes it easier to maintain custom localenv.docker files in a separate
repository from the general-use dockerfiles.

This script will not overwrite existing files or links so is safe to call
more than once unless the --replace option is passed.


OPTIONS

 --replace           If set, existing symlinks _will_ be overwritten

 --no-act,
 --dry-run           Don't change files, just list what would be done

 --help, -h          This usage message
 --version           Show script version


SOURCE DIRECTORY LAYOUT

   docker-conf
   ├── puppet
   │   ├── localenv.docker
   │   └── localenv.docker.tsalmoth
   └── upgrade
       ├── upgrade.conf.jhegaala
       ├── upgrade.conf.orca
       └── upgrade.conf.tsalmoth

The source directory should mirror the docker folders requiring a local
configuration. If a `.HOSTNAME` version of the file exists, it will be
linked instead of the regular version. It is perfectly fine to have only
.HOSTNAME tagged files or no .HOSTNAME tagged files (including in the
upgrade directory).

The upgrade configuration is read by the `upgrade_all` script.
__USAGE__

use Cwd;
use FindBin;
use File::Find;
use File::Spec::Functions qw/ abs2rel rel2abs splitpath catdir catfile /;
use Sys::Hostname;

get_options( \%OPT, @OPT_SPEC );
MAIN(\%OPT, @ARGV);

sub SYMLINK {
    my ($old, $new) = @_;
    return if -e $new and not $OPT{replace};
    return if -e $new and not -l $new;
    say "$new -> $old";
    symlink $old, $new unless $OPT{noact};
}

sub MAIN {
    my ($opt, $source, $target) = @_;
    die "Source directory required.\n"       unless defined($source);
    die "Source directory does not exist.\n" unless -d $source;
    $target //= getcwd();

    # Ensure absolute
    $_ = rel2abs($_), for $source, $target;

    link_localenv($source, $target);
    link_update($source, $target);
}

sub link_update {
    my ($source, $target) = @_;
    my @candidates = ("upgrade.conf.".hostname(), "upgrade.conf");

    my ($orig) = grep -f $_, map catfile($source, "upgrade", $_), @candidates;
    my $link = catfile($target, "upgrade.conf");

    return unless defined($orig);
    SYMLINK abs2rel($orig, $target), $link if -d $target;
}

sub link_localenv {
    my ($source, $target) = @_;
    my $hostname = hostname;

    my $wanted = sub {
        my $relpath = abs2rel($File::Find::name, $source);
        my ($vol, $dir, $file) = splitpath($relpath);
        # Searching only for localenv.docker or localenv.docker.HOSTNAME
        return unless $file =~ /^localenv\.docker(?:\.\Q$hostname\E)?$/;
        # Skip localenv.docker if localenv.docker.HOSTNAME exists
        return if $file eq 'localenv.docker' and -e "$File::Find::name.$hostname";

        my $parent = catdir($target, $dir);
        my $link   = catfile($target, $dir, 'localenv.docker');

        SYMLINK abs2rel($File::Find::name, $parent), $link if -d $parent;
    };

    find { wanted => $wanted, no_chdir => 1 }, $source;
}


sub get_options {
    my $OPT = shift;
    GetOptions $OPT, @_ or usage(1);
    usage() if $$OPT{help} || $$OPT{version};
    lock_keys(%$OPT, keys %$OPT, map /^(\w+)/, @_);
}

sub usage {
    my $status = (@_ && $_[0] =~ /^\d+$/) ? shift(@_) : 0+@_;
    print @_, "\n" if @_;
    require File::Spec; my $exe = (File::Spec->splitpath($0))[2];
    $OPT{$_} = $OPT{$_} ? "enabled" : "disabled" for map /^(\w+).*!/, @OPT_SPEC;
    print $OPT{version} ? "$exe version $VERSION\n" : USAGE($exe);
    exit $status;
}
