
DOCKER_INCLUDES=$(wildcard *.docker)
GLOBAL_INCLUDES=$(wildcard ../_includes/*)
DOCKER_FORCE=$(shell  (docker version | grep -q 'API version: 1.1') && echo '-f')
TAG ?= latest

.PHONY: build check-name
.PHONY: bump_revision commit
.PHONY: bump_update upgrade force-upgrade


Dockerfile: Dockerfile.in ${GLOBAL_INCLUDES} ${LOCALENV} ${DOCKER_INCLUDES}
	perl -MFile::Slurp -ne 'print /^INCLUDE(\??)\s+(.*)/ ? read_file("$$2", err_mode => ($$1 ? "quiet" : "croak")) : $$_' $< >$@

build: Dockerfile
	docker build --rm -t ${CONTAINER}:${TAG} .
	docker images | perl -ne'print if 1==$$. or m#${CONTAINER}#'

release: build revision update
ifneq "${TAG}" "latest"
	docker tag ${DOCKER_FORCE} ${CONTAINER}:${TAG} ${REPOSITORY}:latest
endif
	docker tag ${DOCKER_FORCE} ${CONTAINER}:${TAG} ${REPOSITORY}:${TAG}
	docker tag ${DOCKER_FORCE} ${CONTAINER}:${TAG} ${REPOSITORY}:r$$(cat revision).$$(cat update)
	docker images | perl -ne'print if 1==$$. or m#${REPOSITORY}#'

commit: bump_revision
	$(MAKE) release

push: check-remote revision update
	docker tag ${DOCKER_FORCE} ${CONTAINER}:${TAG} ${REMOTE}/${REPOSITORY}:r$$(cat revision).$$(cat update)
	docker tag ${DOCKER_FORCE} ${CONTAINER}:${TAG} ${REMOTE}/${REPOSITORY}:${TAG}
ifneq "${TAG}" "latest"
	docker tag ${DOCKER_FORCE} ${CONTAINER}:${TAG} ${REMOTE}/${REPOSITORY}:latest
endif
	docker push ${REMOTE}/${REPOSITORY}:r$$(cat revision).$$(cat update)
	docker push ${REMOTE}/${REPOSITORY}:${TAG}
ifneq "${TAG}" "latest"
	docker push ${REMOTE}/${REPOSITORY}:latest
endif

upgrade: check-name
	docker exec -it ${NAME} sh -c 'apt-get update && apt-get -u dist-upgrade --assume-no' | grep -q 'Do you want to continue'
	$(MAKE) force-upgrade

force-upgrade: Dockerfile revision
	$(MAKE) bump_update
	docker build -q --rm --no-cache=true -t ${CONTAINER}:${TAG} .
ifneq "${TAG}" "latest"
	docker tag ${DOCKER_FORCE} ${CONTAINER}:${TAG} ${REPOSITORY}:latest
endif
	docker tag ${DOCKER_FORCE} ${CONTAINER}:${TAG} ${REPOSITORY}:${TAG}
	docker tag ${DOCKER_FORCE} ${CONTAINER}:${TAG} ${REPOSITORY}:r$$(cat revision).$$(cat update)
	docker images | perl -ne'print if 1==$$. or m#\Q${REPOSITORY}\E#'

check-name:
ifndef NAME
	$(error NAME is undefined)
endif

check-remote:
ifndef REMOTE
	$(error REMOTE is undefined)
endif

${LOCALENV}:
	touch ${LOCALENV}

revision:
	echo 0 > revision

update:
	echo 0 > update

bump_revision: revision
	expr 1 + $$(cat revision) > revision
	rm -f update

bump_update: update
	expr 1 + $$(cat update) > update


### Local Variables:
### mode: makefile
### End:
